#-*- Makefile -*-
# do all "real work" in recursive call (because win-builder doesn't read Makeconf) 
pkg = maps
CP = cp
ECHO = echo
RM = rm -f
MKDIR = mkdir
AWK = @AWK@
.PHONY: all shlib mapdata gdata ldata ndata clean gmake lmake objects world2

all: shlib mapdata

# the map data
mapdir = ../inst/mapdata
mapdata: gdata ldata ndata

.SUFFIXES: .G .L .N .gon .line .name

GDATA = county.G state.G usa.G nz.G world.G world2.G italy.G france.G state.vbm.G \
        state.carto.G legacy_world.G legacy_world2.G lakes.G
LDATA = county.L state.L usa.L nz.L world.L world2.L italy.L france.L state.vbm.L \
        state.carto.L legacy_world.L legacy_world2.L lakes.L
NDATA = county.N state.N usa.N nz.N world.N world2.N italy.N france.N state.vbm.N \
        state.carto.N legacy_world.N legacy_world2.N lakes.N

.line.L:
	@$(MKDIR) -p $(mapdir)
	./Lmake 0 s b ${*}.line ${*}.linestats $(mapdir)/${*}.L

.gon.G:
	./Gmake b ${*}.gon ${*}.gonstats $(mapdir)/${*}.G $(mapdir)/${*}.L

.name.N:
	@$(MKDIR) -p $(mapdir)
	@$(CP) ${*}.name $(mapdir)/${*}.N

state.carto.L: state.carto.line state.carto.linestats Lmake
	@$(MKDIR) -p $(mapdir)
	./Lmake 0 p b state.carto.line state.carto.linestats $(mapdir)/state.carto.L

state.vbm.L: state.vbm.line state.vbm.linestats Lmake
	@$(MKDIR) -p $(mapdir)
	./Lmake 0 p b state.vbm.line state.vbm.linestats $(mapdir)/state.vbm.L

gdata: gmake ldata
	$(MAKE) -f "$(R_HOME)/etc$(R_ARCH)/Makeconf" -f Makefile $(GDATA)

ldata: lmake world2
	$(MAKE) -f "$(R_HOME)/etc$(R_ARCH)/Makeconf" -f Makefile $(LDATA)

ndata: world2
	$(MAKE) -f "$(R_HOME)/etc$(R_ARCH)/Makeconf" -f Makefile $(NDATA)

lmake:
	$(MAKE) -f "$(R_HOME)/etc$(R_ARCH)/Makeconf" -f Makefile Lmake

gmake:
	$(MAKE) -f "$(R_HOME)/etc$(R_ARCH)/Makeconf" -f Makefile Gmake

world2:
	$(MAKE) -f "$(R_HOME)/etc$(R_ARCH)/Makeconf" -f Makefile world2.line

world2.line: world.line legacy_world.line
	@$(ECHO) "Converting world to world2"
	$(AWK) -f ./convert.awk < world.line > world2.line
	@$(CP) world.linestats world2.linestats
	@$(ECHO) "Creating legacy world2 database"
	$(AWK) -f ./legacy_convert.awk < legacy_world.line > legacy_world2.line
	@$(CP) legacy_world.linestats legacy_world2.linestats
	@$(CP) legacy_world.gon legacy_world2.gon
	@$(CP) legacy_world.gonstats legacy_world2.gonstats
	@$(CP) legacy_world.name legacy_world2.name

# the shared library
SHLIB = $(pkg)$(SHLIB_EXT)
OBJECTS = init.o mapclip.o mapget.o smooth.o thin.o 
libdir = ../libs

shlib: objects
	"$(R_HOME)/bin/R" CMD SHLIB -o $(SHLIB) $(OBJECTS)

objects:
	$(MAKE) -f "$(R_HOME)/etc$(R_ARCH)/Makeconf" -f Makefile $(OBJECTS)

# clean
# $(SHLIB_EXT) is not set when making "clean", so write all possibilities explicitely
clean:
	$(RM) $(OBJECTS) Gmake Lmake world2.line* $(pkg).s[lo] $(pkg).dylib *.exe $(pkg).dll symbols.rds
	$(RM) -r $(mapdir) $(libdir)
	$(RM) legacy_world2.*
